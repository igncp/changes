diff --git a/package.json b/package.json
index 120e7d6..c1ea57f 100644
--- a/package.json
+++ b/package.json
@@ -80,6 +80,7 @@
     "path-to-regexp": "1.5.3",
     "pluralize": "1.2.1",
     "prompt": "0.2.14",
+    "ramda": "^0.22.1",
     "rc": "1.0.1",
     "reportback": "~0.1.9",
     "rttc": "9.3.3",
diff --git a/test/helpers/router.js b/test/helpers/router.js
index 4171b50..a95e8e6 100644
--- a/test/helpers/router.js
+++ b/test/helpers/router.js
@@ -1,9 +1,13 @@
 /**
  * Module dependencies
  */
-var _ = require('lodash');
-
+var R = require('ramda');
 
+function objectMatches(obj) {
+  return R.any(function(item) {
+    return R.equals(R.pick(R.keys(obj), item), obj);
+  });
+}
 
 var $Router = {
 
@@ -38,7 +42,7 @@ var $Router = {
       shouldDelete: function(expected) {
         it('should delete route in _privateRouter', function() {
           var boundRoutes = this.sails.router._privateRouter.routes[expected.method];
-          _.some(boundRoutes, expected).should.be.false;
+          objectMatches(expected)(boundRoutes || []).should.be.false;
         });
 
         return Chainable;
@@ -69,7 +73,7 @@ var $Router = {
 
         it('should create ' + readableRoute + ' in _privateRouter router', function() {
           var boundRoutes = this.sails.router._privateRouter.routes[expected.method];
-          _.some(boundRoutes, expected).should.be.true;
+          objectMatches(expected)(boundRoutes || []).should.be.true;
         });
         return Chainable;
       },
diff --git a/test/helpers/sails.js b/test/helpers/sails.js
index 44f5e23..f737cdb 100644
--- a/test/helpers/sails.js
+++ b/test/helpers/sails.js
@@ -1,12 +1,15 @@
 /**
  * Module dependencies
  */
-var _ = require('lodash');
+var R = require('ramda');
 var util = require('util');
 var should = require('should');
 var domain = require('domain');
 var Sails = require('root-require')('lib/app');
 
+var isObject = R.is(Object);
+var defaults = R.flip(R.merge);
+
 /**
  * Manage an instance of Sails
  *
@@ -32,8 +35,8 @@ var helper = {
      */
     function _cleanOptions (options) {
       var testDefaults = { log: {level: 'error'}, globals: false };
-      options = _.isObject(options) ? options : {};
-      return _.defaults(options, testDefaults);
+      options = isObject(options) ? options : {};
+      return defaults(options, testDefaults);
     }
 
 
@@ -51,7 +54,7 @@ var helper = {
 
       // Defaults
       // (except use test defaults)
-      if (!_.isObject(options)) {
+      if (!isObject(options)) {
         testDescription = 'default settings';
         msSlowThreshold = 750;
       }
@@ -86,7 +89,7 @@ var helper = {
      * @return {[type]}         [description]
      */
     _load.expectFatalError = function( options ) {
-      options = _.isObject(options) ? options : {};
+      options = isObject(options) ? options : {};
       var sailsOpts = _cleanOptions(options);
 
       it(', sails should deliberately terminate process', function (done) {
diff --git a/test/integration/new.test.js b/test/integration/new.test.js
index c4fd5ce..6be2935 100644
--- a/test/integration/new.test.js
+++ b/test/integration/new.test.js
@@ -5,7 +5,6 @@
 var assert  = require('assert');
 var fs    = require('fs-extra');
 var exec  = require('child_process').exec;
-var _   = require('lodash');
 var appHelper = require('./helpers/appHelper');
 var path = require('path');
 var util  = require('util');
diff --git a/test/unit/app.initializeHooks.test.js b/test/unit/app.initializeHooks.test.js
index 3027617..14d9c37 100644
--- a/test/unit/app.initializeHooks.test.js
+++ b/test/unit/app.initializeHooks.test.js
@@ -3,7 +3,7 @@
  */
 var should = require('should');
 var assert = require('assert');
-var _ = require('lodash');
+var R = require('ramda');
 
 var constants = require('../fixtures/constants');
 var customHooks = require('../fixtures/customHooks');
@@ -39,8 +39,8 @@ describe('app.initializeHooks()', function() {
     });
     it('should expose at least the expected core hooks', function() {
 
-      var intersection = _.intersection(_.keys(sails.hooks), _.keys(constants.EXPECTED_DEFAULT_HOOKS));
-      assert.deepEqual(intersection, _.keys(constants.EXPECTED_DEFAULT_HOOKS),  'Missing expected default hooks');
+      var intersection = R.intersection(R.keys(sails.hooks), R.keys(constants.EXPECTED_DEFAULT_HOOKS));
+      assert.deepEqual(intersection, R.keys(constants.EXPECTED_DEFAULT_HOOKS),  'Missing expected default hooks');
     });
   });
 
@@ -50,8 +50,8 @@ describe('app.initializeHooks()', function() {
       sails.hooks.should.be.an.Object;
     });
     it('should expose all the core hooks except for Grunt', function() {
-      var intersection = _.intersection(_.keys(sails.hooks), _.keys(constants.EXPECTED_DEFAULT_HOOKS));
-      assert.deepEqual(intersection, _.without(_.keys(constants.EXPECTED_DEFAULT_HOOKS), 'grunt'),  'Missing expected default hooks');
+      var intersection = R.intersection(R.keys(sails.hooks), R.keys(constants.EXPECTED_DEFAULT_HOOKS));
+      assert.deepEqual(intersection, R.without(['grunt'], R.keys(constants.EXPECTED_DEFAULT_HOOKS)),  'Missing expected default hooks');
     });
   });
 
@@ -61,8 +61,8 @@ describe('app.initializeHooks()', function() {
       sails.hooks.should.be.an.Object;
     });
     it('should expose all the core hooks except for Grunt', function() {
-      var intersection = _.intersection(_.keys(sails.hooks), _.keys(constants.EXPECTED_DEFAULT_HOOKS));
-      assert.deepEqual(intersection, _.without(_.keys(constants.EXPECTED_DEFAULT_HOOKS), 'grunt'),  'Missing expected default hooks');
+      var intersection = R.intersection(R.keys(sails.hooks), R.keys(constants.EXPECTED_DEFAULT_HOOKS));
+      assert.deepEqual(intersection, R.without(['grunt'], R.keys(constants.EXPECTED_DEFAULT_HOOKS)),  'Missing expected default hooks');
     });
   });
 
@@ -81,8 +81,8 @@ describe('app.initializeHooks()', function() {
         .property('noop');
     });
     it('should also expose the expected core hooks', function() {
-      var intersection = _.intersection(Object.keys(sails.hooks), _.keys(constants.EXPECTED_DEFAULT_HOOKS));
-      assert.deepEqual(intersection, _.keys(constants.EXPECTED_DEFAULT_HOOKS),  'Missing expected default hooks');
+      var intersection = R.intersection(Object.keys(sails.hooks), R.keys(constants.EXPECTED_DEFAULT_HOOKS));
+      assert.deepEqual(intersection, R.keys(constants.EXPECTED_DEFAULT_HOOKS),  'Missing expected default hooks');
     });
   });
 
@@ -200,7 +200,7 @@ describe('app.initializeHooks()', function() {
 
     it('should add two `/foo` routes to the sails config', function() {
       var boundRoutes = sails.router._privateRouter.routes['get'];
-      assert(_.where(boundRoutes, {path: "/foo", method: "get"}).length === 3);
+      assert(R.filter(R.whereEq({path: "/foo", method: "get"}), boundRoutes).length === 3);
     });
 
     it('should bind the routes in the correct order', function(done) {
@@ -224,7 +224,7 @@ describe('app.initializeHooks()', function() {
 
     it('should add four `/foo` routes to the sails config', function() {
       var boundRoutes = sails.router._privateRouter.routes['get'];
-      assert(_.where(boundRoutes, {path: "/foo", method: "get"}).length === 5);
+      assert(R.filter(R.whereEq({path: "/foo", method: "get"}), boundRoutes).length === 5);
     });
 
     it('should bind the routes in the correct order', function(done) {
diff --git a/test/unit/req.session.test.js b/test/unit/req.session.test.js
index 7192bfe..5d032cf 100644
--- a/test/unit/req.session.test.js
+++ b/test/unit/req.session.test.js
@@ -4,10 +4,11 @@
 
 var assert = require('assert');
 var util = require('util');
-var _ = require('lodash');
+var R = require('ramda');
 var async = require('async');
 var Sails = require('../../lib').Sails;
 
+var isObject = R.is(Object);
 
 describe('req.session', function (){
 
@@ -40,14 +41,14 @@ describe('req.session', function (){
     before(function setupTestRoute(){
       app.post('/sessionTest', function (req, res){
         doesSessionExist = !!req.session;
-        isSessionAnObject = _.isObject(req.session);
+        isSessionAnObject = isObject(req.session);
         req.session.something = 'some string';
         res.send();
       });
 
       app.get('/sessionTest', function (req, res){
         doesSessionExist = !!req.session;
-        isSessionAnObject = _.isObject(req.session);
+        isSessionAnObject = isObject(req.session);
         doesTestPropertyStillExist = req.session.something === 'some string';
         res.send();
       });
