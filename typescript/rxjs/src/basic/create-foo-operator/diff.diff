diff --git a/doc/operators.md b/doc/operators.md
index f092e52..a868307 100644
--- a/doc/operators.md
+++ b/doc/operators.md
@@ -244,6 +244,7 @@ There are operators for different purposes, and they may be categorized as: crea
 - [`every`](../class/es6/Observable.js~Observable.html#instance-method-every)
 - [`find`](../class/es6/Observable.js~Observable.html#instance-method-find)
 - [`findIndex`](../class/es6/Observable.js~Observable.html#instance-method-findIndex)
+- [`foo`](../class/es6/Observable.js~Observable.html#instance-method-foo)
 - [`isEmpty`](../class/es6/Observable.js~Observable.html#instance-method-isEmpty)
 
 ### Mathematical and Aggregate Operators
diff --git a/spec/operators/foo-spec.ts b/spec/operators/foo-spec.ts
new file mode 100644
index 0000000..0002f90
--- /dev/null
+++ b/spec/operators/foo-spec.ts
@@ -0,0 +1,38 @@
+import {expect} from 'chai';
+// declare const {hot, cold, asDiagram, expectObservable, expectSubscriptions};
+
+/** @test {foo} */
+describe('Observable.prototype.foo', () => {
+
+  // asDiagram('filter(x => x % 2 === 1)')('should filter out even values', () => {
+    // const source = hot('--0--1--2--3--4--|');
+    // const subs =       '^                !';
+    // const expected =   '-----1-----3-----|';
+
+    // expectObservable(source.filter(oddFilter)).toBe(expected);
+    // expectSubscriptions(source.subscriptions).toBe(subs);
+  // });
+
+  it('should send the value in the odd cases', () => {
+    const source = hot('--3-4-5-6--7-8--9--|');
+    const subs =       '^                  !';
+    const expected =   '--a-4-a-6--a-8--a--|';
+
+    expectObservable(source.foo('a')).toBe(expected);
+    expectSubscriptions(source.subscriptions).toBe(subs);
+  });
+
+  it('should not return anything if there are not values', () => {
+    const source = hot('--------|');
+    const expected = '--------|';
+
+    expectObservable(source.foo('a')).toBe(expected);
+  });
+
+  it('should throw if no value is passed', () => {
+    const source = hot('-1--2--^-3-4-5-6--7-8--9--|');
+
+    expect(() => source.foo()).to.throw();
+  });
+
+});
diff --git a/src/Rx.ts b/src/Rx.ts
index 4978b8e..b58f8a9 100644
--- a/src/Rx.ts
+++ b/src/Rx.ts
@@ -73,6 +73,7 @@ import './add/operator/finally';
 import './add/operator/find';
 import './add/operator/findIndex';
 import './add/operator/first';
+import './add/operator/foo';
 import './add/operator/groupBy';
 import './add/operator/ignoreElements';
 import './add/operator/isEmpty';
diff --git a/src/add/operator/foo.ts b/src/add/operator/foo.ts
new file mode 100644
index 0000000..8663adc
--- /dev/null
+++ b/src/add/operator/foo.ts
@@ -0,0 +1,10 @@
+import { Observable } from '../../Observable';
+import { foo, FooSignature } from '../../operator/foo';
+
+Observable.prototype.foo = foo;
+
+declare module '../../Observable' {
+  interface Observable<T> {
+    foo: FooSignature<T>;
+  }
+}
diff --git a/src/operator/foo.ts b/src/operator/foo.ts
new file mode 100644
index 0000000..70456fb
--- /dev/null
+++ b/src/operator/foo.ts
@@ -0,0 +1,82 @@
+import { Operator } from '../Operator';
+import { Subscriber } from '../Subscriber';
+import { Observable } from '../Observable';
+import { TeardownLogic } from '../Subscription';
+
+/**
+ * TODO: This explanation is still part of `filter`, update it completely with the one for `foo`
+ * Foo items emitted by the source Observable by only emitting those that
+ * satisfy a specified predicate.
+ *
+ * <span class="informal">Like
+ * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
+ * it only emits a value from the source if it passes a criterion function.</span>
+ *
+ * <img src="./img/filter.png" width="100%">
+ *
+ * Similar to the well-known `Array.prototype.filter` method, this operator
+ * takes values from the source Observable, passes them through a `predicate`
+ * function and only emits those values that yielded `true`.
+ *
+ * @example <caption>Emit only click events whose target was a DIV element</caption>
+ * var clicks = Rx.Observable.fromEvent(document, 'click');
+ * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
+ * clicksOnDivs.subscribe(x => console.log(x));
+ *
+ * @see {@link every}
+ *
+ * @param {value: any} the value to send every other time through `subscribe`.
+ * @param {any} [thisArg] An optional argument to determine the value of `this`
+ * in the `predicate` function.
+ * @return {Observable} An Observable of values from the source that were
+ * allowed by the `predicate` function.
+ * @method filter
+ * @owner Observable
+ */
+export function foo<T>(value: T, thisArg?: any): Observable<T> {
+  if (typeof value === 'undefined') {
+    throw new TypeError('The argument passed to foo can not be undefined');
+  }
+
+  return this.lift(new FooOperator(value, thisArg));
+}
+
+export interface FooSignature<T> {
+  (value: T, thisArg?: any): Observable<T>;
+}
+
+class FooOperator<T> implements Operator<T, T> {
+  constructor(private value: T, private thisArg?: any) {
+  }
+
+  call(subscriber: Subscriber<T>, source: any): TeardownLogic {
+    return source._subscribe(new FooSubscriber(subscriber, this.value, this.thisArg));
+  }
+}
+
+/**
+ * We need this JSDoc comment for affecting ESDoc.
+ * @ignore
+ * @extends {Ignored}
+ */
+class FooSubscriber<T> extends Subscriber<T> {
+
+  didSendValue: boolean = false;
+
+  constructor(destination: Subscriber<T>,
+              private value: T,
+              private thisArg: any) {
+    super(destination);
+    this.value = value;
+  }
+
+  protected _next(v: T) {
+    if (this.didSendValue) {
+      this.didSendValue = false;
+      this.destination.next(v);
+    } else {
+      this.didSendValue = true;
+      this.destination.next(this.value);
+    }
+  }
+}
